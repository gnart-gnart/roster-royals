basePath: /pub
host: "sports-api.cloudbet.com"
consumes:
  - application/json
  - application/x-protobuf
definitions:
  Category:
    description: Category is used for the /sports/{key} endpoint
    properties:
      competitions:
        description: list of all competitions associated with this Category
        items:
          $ref: '#/definitions/CompetitionForSport'
        type: array
      key:
        description: slug for this Category
        example: '"atp"'
        type: string
      name:
        description: name of this Category
        example: '"ATP"'
        type: string
    type: object
  Competition:
    description: Competition is used for the /sports/competitions/{key} endpoint
    properties:
      category:
        $ref: '#/definitions/Identifier'
      events:
        description: list of all events associated with this competition
        items:
          $ref: '#/definitions/EventForCompetition'
        type: array
      key:
        description: slug for this Competition. Composed of <sport-key>-<category-key>-<competition-key> as shown in the example value.
        example: '"tennis-atp-french-open-men-singles"'
        type: string
      name:
        description: name of this Competition
        example: '"French Open, Men Singles"'
        type: string
      sport:
        $ref: '#/definitions/Identifier'
    type: object
  CompetitionForSport:
    description: CompetitionForSport is used for the /sports/{key} endpoint
    properties:
      eventCount:
        description: number of events associated with this Competition, 0 events indicates inactive Competition
        example: 2
        format: uint32
        type: integer
      key:
        description: slug for this Competition. Composed of <sport-key>-<category-key>-<competition-key> as shown in the example value.
        example: '"tennis-atp-french-open-men-singles"'
        type: string
      name:
        description: name of this Competition
        example: '"French Open, Men Singles"'
        type: string
    type: object
  CompetitionResponse:
    description: CompetitionResponse presents competition with list of events
    properties:
      category:
        $ref: '#/definitions/Identifier'
      events:
        description: list of all events associated with this competition
        items:
          $ref: '#/definitions/EventForCompetition'
        type: array
      key:
        description: slug for this Competition. Composed of <sport-key>-<category-key>-<competition-key> as shown in the example value.
        example: '"tennis-atp-french-open-men-singles"'
        type: string
      name:
        description: name of this Competition
        example: '"French Open, Men Singles"'
        type: string
      sport:
        $ref: '#/definitions/Identifier'
    type: object
  CompetitionWithCategory:
    description: CompetitionWithCategory is used for the /sports/events/{id} endpoint to link events with competitions
    properties:
      category:
        $ref: '#/definitions/Identifier'
      key:
        description: slug for this Competition. Composed of <sport-key>-<category-key>-<competition-key> as shown in the example value.
        example: '"tennis-atp-french-open-men-singles"'
        type: string
      name:
        description: name of this Competition
        example: '"French Open, Men Singles"'
        type: string
    type: object
  Error:
    description: Error presents response errors for all error status codes.
    properties:
      error:
        description: Additional Error Details, if applicable for a given error
        example: empty request body
        type: string
      status:
        description: Error Status
        example: MALFORMED_REQUEST
        type: string
    type: object
  Event:
    description: Event is used for the /sports/events/{id} endpoint
    properties:
      away:
        $ref: '#/definitions/TeamIdentifier'
      competition:
        $ref: '#/definitions/CompetitionWithCategory'
      cutoffTime:
        description: event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
        example: '"2021-06-09T09:00:00Z"'
        type: string
      home:
        $ref: '#/definitions/TeamIdentifier'
      id:
        description: unique ID for this Event
        example: 7498746
        format: uint32
        type: integer
      key:
        description: slug for this Event
        example: '"c886a-nadal-rafael-v-c8973-schwartzman-diego"'
        type: string
      markets:
        additionalProperties:
          $ref: '#/definitions/Market'
        description: mapping between market key and all associated markets for this Event
        type: object
      metadata:
        $ref: '#/definitions/EventMetadata'
      name:
        description: name of this Event
        example: '"Rafael Nadal V Diego Schwartzman"'
        type: string
      sequence:
        description: sequential update number for this Event
        example: 127
        format: int64
        type: integer
      sport:
        $ref: '#/definitions/Identifier'
      status:
        $ref: '#/definitions/EventStatus'
    type: object
  EventForCompetition:
    description: EventForCompetition is used for the /sports/competitions/{key} endpoint
    properties:
      away:
        $ref: '#/definitions/TeamIdentifier'
      cutoffTime:
        description: event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
        example: '"2021-06-09T09:00:00Z"'
        type: string
      home:
        $ref: '#/definitions/TeamIdentifier'
      id:
        description: unique ID for this Event
        example: 7498746
        format: uint32
        type: integer
      key:
        description: slug for this Event
        example: '"c886a-nadal-rafael-v-c8973-schwartzman-diego"'
        type: string
      markets:
        additionalProperties:
          $ref: '#/definitions/Market'
        description: mapping between market key and all associated markets for this Event
        type: object
      metadata:
        $ref: '#/definitions/EventMetadata'
      name:
        description: name of this Event
        example: '"Rafael Nadal V Diego Schwartzman"'
        type: string
      sequence:
        description: sequential update number for this Event
        example: 127
        format: int64
        type: integer
      status:
        $ref: '#/definitions/EventStatus'
    type: object
  EventMetadata:
    description: Event metadata contains additional event info
    properties:
      opinion:
        description: (deprecated, use opinions instead) opinion is an answer to the question "How do players bet on Cloudbet v/s the currently offered odds?"
        items:
          $ref: '#/definitions/OutcomeProbability'
        type: array
      opinions:
        additionalProperties:
          $ref: '#/definitions/Opinion'
        description: opinions represent the betting patterns of players on different outcomes of different markets
        type: object
    type: object
  EventResponse:
    description: EventResponse presents an Event with markets and submarkets
    properties:
      away:
        $ref: '#/definitions/TeamIdentifier'
      competition:
        $ref: '#/definitions/CompetitionWithCategory'
      cutoffTime:
        description: event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
        example: '"2021-06-09T09:00:00Z"'
        type: string
      endTime:
        description: the time when the event ends in string format "2006-01-02T15:04:05Z07:00" (RFC3339), optional.
        example: '"2021-06-09T10:45:00Z"'
        type: string
      gradingDuration:
        description: |-
          estimated grading duration in minutes between event finish time and bet complete time (not available for outrights)
          for example, value `30` means most of the bets will be graded after 30 minutes
        example: 30
        format: int32
        type: integer
      home:
        $ref: '#/definitions/TeamIdentifier'
      id:
        description: unique ID for this Event
        example: 7498746
        format: uint32
        type: integer
      key:
        description: slug for this Event
        example: '"c886a-nadal-rafael-v-c8973-schwartzman-diego"'
        type: string
      markets:
        additionalProperties:
          $ref: '#/definitions/Market'
        description: mapping between market key and all associated markets for this Event
        type: object
      metadata:
        $ref: '#/definitions/EventMetadata'
      name:
        description: name of this Event
        example: '"Rafael Nadal V Diego Schwartzman"'
        type: string
      resultedTime:
        description: resulted time available after end of event in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
        example: '"2021-06-09T11:00:00Z"'
        type: string
      sequence:
        description: sequential update number for this Event
        example: 127
        format: int64
        type: integer
      settlement:
        additionalProperties:
          $ref: '#/definitions/Scores'
        description: |-
          reserved field for possible future use, empty currently

          The map key will be the score types, such as period=default
        type: object
      sport:
        $ref: '#/definitions/Identifier'
      status:
        $ref: '#/definitions/EventStatus'
      type:
        $ref: '#/definitions/EventType'
    type: object
  EventStatus:
    description: EventStatus presents the current status for a given Event
    enum:
      - PRE_TRADING
      - TRADING
      - TRADING_LIVE
      - RESULTED
      - INTERRUPTED
      - AWAITING_RESULTS
      - POST_TRADING
      - CANCELLED
    type: string
  EventType:
    description: EventType presents the type of an event which affects the markets format
    format: int32
    type: integer
  FixtureListEntry:
    description: |-
      FixtureListEntry is used for the /fixtures endpoint
      It gives an individual sporting event without markets or metadata information
    properties:
      away:
        $ref: '#/definitions/TeamIdentifier'
      cutoffTime:
        description: event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
        example: '"2021-06-09T09:00:00Z"'
        type: string
      home:
        $ref: '#/definitions/TeamIdentifier'
      id:
        description: unique ID for this Event
        example: 7498746
        format: uint32
        type: integer
      key:
        description: slug for this Event
        example: '"c886a-nadal-rafael-v-c8973-schwartzman-diego"'
        type: string
      name:
        description: name of this Event
        example: '"Rafael Nadal V Diego Schwartzman"'
        type: string
      status:
        $ref: '#/definitions/EventStatus'
    type: object
  FixturesCompetition:
    description: |-
      FixturesCompetition is used for the /fixtures endpoint
      It gives a list of all events for a given competition
    properties:
      category:
        $ref: '#/definitions/Identifier'
      events:
        description: list of events which belong to this competition
        items:
          $ref: '#/definitions/FixtureListEntry'
        type: array
      key:
        description: slug for this Competition. Composed of <sport-key>-<category-key>-<competition-key> as shown in the example value.
        example: '"tennis-atp-french-open-men-singles"'
        type: string
      name:
        description: name of this Competition
        example: '"French Open, Men Singles"'
        type: string
    type: object
  FixturesResponse:
    description: FixturesResponse presents a list of upcoming fixtures for a given sport and date
    properties:
      competitions:
        description: list of all requested competitions and events
        items:
          $ref: '#/definitions/FixturesCompetition'
        type: array
    type: object
  Identifier:
    description: Identifier represents a name-key tuple which together identify a given entity such as a sport
    properties:
      key:
        description: slug for this Identifier
        example: '"Tennis"'
        type: string
      name:
        description: name of this Identifier
        example: '"tennis"'
        type: string
    type: object
  LineResponse:
    description: LineResponse presents a selection for a given market key, outcome and params
    properties:
      maxStake:
        description: maximum stake in EUR which can be placed in bets on this Selection; market liability = selection max stake * (price - 1);
        example: 1803.6394618802
        format: double
        type: number
      minStake:
        description: minimum stake in EUR which can be placed in bets on this Selection
        example: 0.1
        format: double
        type: number
      outcome:
        description: outcome of this Selection
        example: '"home"'
        type: string
      params:
        description: |-
          parameters to be sent by the client during bet placement on this selection, such as handicap, period etc.
          Special Note about handicap markets:
          For handicap markets a line is identified by the same params. Selections can be grouped by market key and params alone. Home and away outcomes then have the same market URL for the same handicap lines. The handicap value is dictated by the home team value and inverted on the away side.
        example: '"handicap=-3"'
        type: string
      price:
        description: price at which bets can be placed on this Selection
        example: 1.892
        format: double
        type: number
      probability:
        description: probability of this Selection's outcome
        example: 0.493
        format: double
        type: number
      side:
        $ref: '#/definitions/Side'
      status:
        $ref: '#/definitions/SelectionStatus'
    type: object
  Market:
    description: |-
      Market is used as a part of Event and EventForCompetition
      used to build a list of all markets for a given Event
    properties:
      submarkets:
        additionalProperties:
          $ref: '#/definitions/Submarket'
        description: mapping between submarket key and all associated submarkets for this Market
        type: object
    type: object
  Opinion:
    description: Opinion represents the opinions for all outcomes of a given market
    properties:
      categories:
        description: list of outcome probabilities
        items:
          $ref: '#/definitions/OutcomeProbability'
        type: array
  OutcomeProbability:
    description: Similar to Selection, but represents opinion (probability) for particular outcome of the market
    properties:
      marketKey:
        description: market key used to build opinion
        example: basketball.handicap
        type: string
      outcome:
        description: outcome
        example: home
        type: string
      params:
        description: market parameters used to build opinion, such as handicap, period etc.
        example: handicap=-3
        type: string
      probability:
        description: probability
        example: 0.47347018
        format: float
        type: number
    type: object
  PostLine:
    description: LineRequest presents the line fetch request JSON body
    properties:
      eventId:
        description: Event ID for which the line fetch is requested
        example: "6162894"
        type: string
      marketUrl:
        description: |-
          `marketUrl` is composed from the initial Feed API selection response as `marketKey/outcome?params`.
          If no params (empty string) were present in the initial Feed API response, then omit the `params` query string format the `marketUrl` as `marketKey/outcome`
          Special Note about handicap markets:
          For handicap markets a line is identified by the same params. Selections can be grouped by market key and params alone. Home and away outcomes then have the same market URL for the same handicap lines. The handicap value is dictated by the home team value and inverted on the away side.
        example: basketball.handicap/home?handicap=-3
        type: string
    required:
      - eventId
      - marketUrl
    type: object
  Scores:
    description: Scores is a reserved field for possible future use with Settlement
    properties:
      layout:
        description: layout for scores
        example: 'event: [''home'', ''away'']; outright: [''outcome=swansea'']; racing: [''player=lucky-k-1'', ''player=darwin-c-1'', ''player=loca-m-1'']'
        items:
          type: string
        type: array
      scores:
        description: scores details
        example: 'event: [1, 2]; outright: [1]; racing: [1, 1, 2]'
        items:
          format: uint32
          type: integer
        type: array
    type: object
  Selection:
    description: |-
      Selection is used as a part of Submarket
      used to build a list of all selections for a given Submarket
    properties:
      maxStake:
        description: maximum stake in EUR which can be placed in bets on this Selection; market liability = selection max stake * (price - 1);
        example: 1803.6394618802
        format: double
        type: number
      minStake:
        description: minimum stake in EUR which can be placed in bets on this Selection
        example: 0.1
        format: double
        type: number
      outcome:
        description: outcome of this Selection
        example: '"home"'
        type: string
      params:
        description: |-
          parameters to be sent by the client during bet placement on this selection, such as handicap, period etc.
          Special Note about handicap markets:
          For handicap markets a line is identified by the same params. Selections can be grouped by market key and params alone. Home and away outcomes then have the same market URL for the same handicap lines. The handicap value is dictated by the home team value and inverted on the away side.
        example: '"handicap=-3"'
        type: string
      price:
        description: price at which bets can be placed on this Selection
        example: 1.892
        format: double
        type: number
      probability:
        description: probability of this Selection's outcome
        example: 0.493
        format: double
        type: number
      side:
        $ref: '#/definitions/Side'
      status:
        $ref: '#/definitions/SelectionStatus'
    type: object
  SelectionStatus:
    description: SelectionStatus presents the current status for a given selection
    enum:
      - SELECTION_DISABLED
      - SELECTION_ENABLED
    type: string
  Side:
    description: |-
      Side of a selection signals whether a selection
      is available for back or lay side betting
    enum:
      - BACK
      - LAY
    type: string
  Sport:
    description: Sport is used for an individual sport's details in the /sports endpoint
    properties:
      competitionCount:
        description: number of competitions associated with this Sport, 0 indicates inactive Sport
        example: 2
        format: uint32
        type: integer
      eventCount:
        description: number of events associated with this Sport, 0 indicates inactive Sport
        example: 2
        format: uint32
        type: integer
      key:
        description: slug for this Sport
        example: tennis
        type: string
      name:
        description: name of this Sport
        example: Tennis
        type: string
    type: object
  SportWithCategory:
    description: |-
      SportWithCategory is used for the /sports/{key} endpoint
      with this hierarchy: sport->categories->competitions
    properties:
      categories:
        description: list of all categories associated with this Sport
        items:
          $ref: '#/definitions/Category'
        type: array
      competitionCount:
        description: number of competitions associated with this Sport, 0 indicates inactive Sport
        example: 2
        format: uint32
        type: integer
      eventCount:
        description: number of events associated with this Sport, 0 indicates inactive Sport
        example: 2
        format: uint32
        type: integer
      key:
        description: slug for this Sport
        example: tennis
        type: string
      name:
        description: name of this Sport
        example: Tennis
        type: string
    type: object
  SportWithCategoryResponse:
    description: SportWithCategoryResponse presents all competitions grouped by categories
    properties:
      categories:
        description: list of all categories associated with this Sport
        items:
          $ref: '#/definitions/Category'
        type: array
      competitionCount:
        description: number of competitions associated with this Sport, 0 indicates inactive Sport
        example: 2
        format: uint32
        type: integer
      eventCount:
        description: number of events associated with this Sport, 0 indicates inactive Sport
        example: 4
        format: uint32
        type: integer
      key:
        description: slug for this Sport
        example: tennis
        type: string
      name:
        description: name of this Sport
        example: Tennis
        type: string
    type: object
  Sports:
    description: Sports is used as the root object in the /sports endpoint
    properties:
      sports:
        description: list of all sports offerred
        items:
          $ref: '#/definitions/Sport'
        type: array
    type: object
  SportsResponse:
    description: SportsResponse presents all sports with their competition count
    properties:
      sports:
        description: list of all sports offerred
        items:
          $ref: '#/definitions/Sport'
        type: array
    type: object
  Submarket:
    description: |-
      Submarket contains selections which are inter-dependent on each other and is used as a part of Market
      used to build a map of all submarkets for a given Market
    properties:
      selections:
        description: list of all associated selections
        items:
          $ref: '#/definitions/Selection'
        type: array
      sequence:
        description: sequential update number
        example: 127
        format: int64
        type: integer
    type: object
  Team:
    description: Team presents the team for a given player
    enum:
      - TEAM_UNDEFINED
      - HOME
      - AWAY
    type: string
  TeamIdentifier:
    description: TeamIdentifier identifies a team competitor for a given event
    properties:
      abbreviation:
        description: abbreviation for this team's name
        example: '"NAD"'
        type: string
      key:
        description: slug for this Identifier
        example: '"c886a-nadal-rafael"'
        type: string
      name:
        description: name of this Identifier
        example: '"Rafael Nadal"'
        type: string
      nationality:
        description: team country code
        example: '"ESP"'
        type: string
    type: object
info:
  description: |-
    The [Cloudbet](https://www.cloudbet.com/en/sports?utmCampaign=axis&utmMedium=community&utmSource=www.cloudbet.com/api/) Feed API uses a long-lived API Key to allow secure access. The `API Key` used follows the JWT authentication standard. You can use these Odds API endpoints to obtain the latest market odds information from Cloudbet.

    This API returns JSON or binary protobuf responses. For JSON responses, send the header `Content-Type: application/json`. For binary protobuf responses, send the header `Content-Type: application/x-protobuf`

    ## Authentication with API Key

    ### Trading API
    1. The Trading API (aka Betting API) is meant for developers who want to place bets and allows you to perform sports betting programatically. You can obtain the Cloudbet Trading `API Key` by logging into your Cloudbet Player account and navigating to the ["My account -> API" section](https://www.cloudbet.com/en/player/api?utmCampaign=axis&utmMedium=community&utmSource=www.cloudbet.com/api/). For further details about how to use the Trading API, please refer to the [Trading API Documentation](https://www.cloudbet.com/api/?urls.primaryName=Trading)


    ### Affiliate API
    1. The Affiliate API is primarily meant if you want to consume Cloudbet odds without needing to place bets programatically. You can obtain the Cloudbet Affiliate `API Key` by logging into your Cloudbet Affiliate account and then visiting the [Affiliate API Token](https://affiliates.cloudbet.com/affiliate_api_token?utmCampaign=axis&utmMedium=community&utmSource=www.cloudbet.com/api/) page. Please note that there are 2 tokens on this page. Make sure to generate the token in the `API Key` section. Also, please take note of the `Expires at` timestamp mentioned in this section which is of a reasonably long duration. Your `API Key` will only be valid until this timestamp and you will have to create a new `API Key` again from the [Affiliate API Token](https://affiliates.cloudbet.com/affiliate_api_token?utmCampaign=axis&utmMedium=community&utmSource=www.cloudbet.com/api/) page before your current token expires to avoid your API calls from being rejected in the future.

    2. Using this Cloudbet Affiliate `API Key` you can then go back to https://www.cloudbet.com/api/ to test the Feed API endpoints as per the next section.

    3. If you authenticate with the Cloudbet Affiliate `API Key`, then the Feed API responses may be cached and up to 1 minute behind the latest updates. This is in contrast to using the Cloudbet Trading `API Key`, which gives you real-time updates.

    ## Testing the Feed API

    1. Our Feed API expects the `API Key` from the previous section to be included in all API requests to the server in an HTTP header that looks like the following:

    `X-API-Key: <API Key>`

    You must replace `<API Key>` with your own `API Key` as obtained in the previous section.

    Example with sample Trading `API Key`. Note that this is a standard JWT token.

    ```
    X-API-Key: eyJhbGciOiJSUzI1NiIsImtpZCI6ImxPVGE3LXVQLVd2QUk1VjhfOHhiYWxjZWlIUmM1OHd6Wi02c21CWGE0Z2MiLCJ0eXAiOiJKV1QifQ.eyJhY2Nlc3NfdGllciI6InRyYWRpbmciLCJleHAiOjE5MzMyMzk2MjgsImlhdCI6MTYxNzg3OTYyOCwiaXNzIjoic3BvcnRzLXBsYXllcnMiLCJqdGkiOiJmZmExZjQ5MC00MzY4LTRhMjEtOGQxYy00NzFlM2FkZTAyYjYiLCJzdWIiOiJiZjA2YjFhZi0zZjM1LTQ2NWUtYTQyZC01Mjc2YTY1ODdmNTIiLCJ0ZW5hbnQiOiJjbG91ZGJldCIsInVzZXJfdXVpZCI6ImJmMDZiMWFmLTNmMzUtNDY1ZS1hNDJkLTUyNzZhNjU4N2Y1MiIsInV1aWQiOiJiZjA2YjFhZi0zZjM1LTQ2NWUtYTQyZC01Mjc2YTY1ODdmNTIifQ.LEwR9AOQ5FGhAKZPGjQ7dl1-0YYUsXbU1fNb17rhUqr_hh7SQipAOv9AlnO8vdExv0bHKrX0zX3_rAnpKdyo5Z6yVVkd-ovpvoTvoiP6gP8yoQqRnrqZKFjHtxHT1wsvqYiBhM52gWzWH77_9ccw5nh78yaxsd2PbZ9meYnqZY_M9x9HGyEU6xFaM1AZ6NaDlGp1iEgqm3atv88vJC75k9H-8Krlh06IwaJxkMnNkrq2cS-rGPDv6tK4jMYpfc7rhXj9ffOr9YOMLQ-fpv7y01hwZD94oUTVoHbAFjBYgMwkh9CdQFbLKZyV0Owb4rFM5BY-4kfKwQlvP9E0TdW3Hw
    ```

    2. After authorization, click on any of the endpoints at https://www.cloudbet.com/api/ (e.g. `/sports`). Click on the `Authorize` button on the top right corner of the page, then enter `<API Key>`. This will authorize you to access our Feed API endpoints from within the OpenAPI GUI itself. Then click on `Try it out` and `Execute`. You will be able to see the API response on this page itself.

    ## Samples and Supporting Documentation
    We provide additional supporting documentation in our [Cloudbet/docs Github repo](https://github.com/Cloudbet/docs)

    ### cURL Samples
    Here are some Feed API cURL samples illustrating the recommended way to ingest odds in bulk from the Cloudbet API.
    Specifically, these samples demonstrate how to request specific Soccer and Baseball markets for the English Premier League (EPL) and Major League Baseball (MLB) competitions respectively.

    1. Fetch Match Odds, Asian Handicap and Total Goals markets for EPL:
    ```
    curl -X 'GET' -H 'accept: application/json' -H 'X-API-Key: <API Key>' \
    'https://sports-api.cloudbet.com/pub/v2/odds/competitions/soccer-england-premier-league?markets=soccer.matchOdds&markets=soccer.asianHandicap&markets=soccer.totalGoals'
    ```

    2. Fetch Moneyline, Totals and Run Line markets for MLB:
    ```
    curl -X 'GET' -H 'accept: application/json' -H 'X-API-Key: <API Key>' \
    'https://sports-api.cloudbet.com/pub/v2/odds/competitions/baseball-usa-mlb?markets=baseball.moneyline&markets=baseball.totals&markets=baseball.runLine'
    ```

    ### Code Samples
    You can refer to [sample JavaScript code on Github](https://github.com/Cloudbet/docs/blob/master/api-sample.js) which guides you on how to obtain sport, competition, event and market information using the API.
    After downloading this script, you can run it locally by adding your API key within the script and then run the command: `node api-sample.js`

    ### Response Samples
    You can refer to [sample Feed API responses on Github](https://github.com/Cloudbet/docs/blob/master/api-responses.md) which gives you a preview of what to expect in our API responses.

    ### API Schemas
    You can refer to [Cloudbet API schemas](https://gist.github.com/kgravenreuth/6703e1e213aecac4d5728f2f699d34e7) which provide details about JSON objects returned within the Cloudbet API. This contains a full list of markets, sports and categories returned by our API.

    ### Protobuf Schema and generated Go Protobuf files
    The Protobuf schema definitions for all Cloudbet API endpoints is available within our [Github repo here](https://github.com/Cloudbet/docs/tree/master/cloudbet). You can also find generated [Go Protobuf files](https://github.com/Cloudbet/docs/tree/master/go/cloudbet). You can use this as a library within your Go client programs.

    ### Event Status details
    Events in the Cloudbet API can transition between different status such as `TRADING`, `TRADING_LIVE` etc. You can find details of these event status [here](https://github.com/Cloudbet/docs/blob/master/README.md#event-status)

    ## Additional Resources
    1. [Trading (aka Betting) API Documentation](https://www.cloudbet.com/api/?urls.primaryName=Trading) The Trading API allows you to bet on Cloudbet odds obtained from the Feed API described on this page.
    2. [Account API Documentation](https://www.cloudbet.com/api/?urls.primaryName=Account) The Account API gives you information about your Cloudbet Account, such as available currencies etc.
    3. [Cloudbet Odds and Betting API Tutorial and Walkthrough blog post](https://www.cloudbet.com/en/blog/posts/sports-betting-api-tutorial-with-golang)
    4. [Cloudbet GraphQL Betting API Tutorial and Walkthrough blog post](https://www.cloudbet.com/en/blog/posts/sports-betting-graphql-api-with-javascript-node-js)
    5. [Postman Collection for Cloudbet Feed, Trading and Account APIs](https://www.postman.com/cloudbet/workspace/cloudbet-api/overview)
    6. [Cloudbet NPM SDK](https://www.npmjs.com/package/@cloudbet/market-helper). You can use this SDK to render markets.
    7. [CodeSandbox Demo of using our Feed API + SDK](https://codesandbox.io/s/cloudbet-odds-api-example-we1vk?file=/src/App.js)
    8. [Github Docs Discussions Page](https://github.com/Cloudbet/docs/discussions). Please feel free to raise any questions you may have about the Cloudbet API here. You can also find existing helpful answers from other Cloudbet API users.
  title: Cloudbet Feed API
  version: "2.0"
paths:
  /v2/odds/competitions/{key}:
    get:
      description: Shows live and upcoming events of the given competiiton key
      operationId: GetCompetition
      parameters:
        - description: key of a competition. It is constructed by sport key + category key + competition key; e.g. soccer-england-premier-league
          in: path
          name: key
          required: true
          type: string
        - description: |-
            time range, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1618997973
            `from` + `to` must be sent together
          format: int64
          in: query
          name: from
          type: integer
        - description: |-
            time range, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1619042340
            `from` + `to` must be sent together
          format: int64
          in: query
          name: to
          type: integer
        - collectionFormat: multi
          description: |-
            If not empty, only display markets specified here. Note that all events in a given time-range will still be returned, even if the specified market is absent
            Must specify each market as a separate query param; e.g. ?markets=basketball.handicap&markets=basketball.moneyline
            Full list of markets: https://gist.github.com/kgravenreuth/6703e1e213aecac4d5728f2f699d34e7#file-markets-json
          in: query
          items:
            type: string
          name: markets
          type: array
        - default: false
          description: if true, include players information
          in: query
          name: players
          type: boolean
        - description: Limit the number of events; e.g. 50
          format: int64
          in: query
          maximum: 10000
          name: limit
          type: integer
      responses:
        "200":
          description: CompetitionResponse
          schema:
            $ref: '#/definitions/CompetitionResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get a competition
      tags:
        - API-Version-2.0
  /v2/odds/events:
    get:
      description: |-
        `live` query param returns all TRADING_LIVE events for a given sport.
        `from` + `to` query params are required if `live = false` in your request to specify a valid time-range to retrieve upcoming (TRADING + PRE_TRADING) events
      operationId: GetEvents
      parameters:
        - description: sport to query events for, e.g. `tennis`
          in: query
          name: sport
          required: true
          type: string
        - description: |-
            time range for upcoming events, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1618997973
            Either `live` or `from` + `to` query params are REQUIRED in your request to specify a valid time-range.
            `from` can't be sent together with `live`. Also, `from` + `to` must be sent together
          format: int64
          in: query
          name: from
          type: integer
        - description: |-
            time range for upcoming events, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1619042340
            Either `live` or `from` + `to` query params are REQUIRED in your request to specify a valid time-range.
            `to` can't be sent together with `live`. Also, `from` + `to` must be sent together
          format: int64
          in: query
          name: to
          type: integer
        - default: false
          description: |-
            If true, return all TRADING_LIVE events
            If false, return TRADING + PRE_TRADING events
            false by default
            `live` can't be sent together with `from` or `to` query params
          in: query
          name: live
          type: boolean
        - collectionFormat: multi
          description: |-
            If not empty, only display markets specified here. Note that all events in a given time-range will still be returned, even if the specified market is absent
            Must specify each market as a separate query param; e.g. ?markets=basketball.handicap&markets=basketball.moneyline
            Full list of markets: https://gist.github.com/kgravenreuth/6703e1e213aecac4d5728f2f699d34e7#file-markets-json
          in: query
          items:
            type: string
          name: markets
          type: array
        - default: false
          description: if true, include players information
          in: query
          name: players
          type: boolean
        - default: 10000
          description: Limit the number of events
          format: int64
          in: query
          maximum: 10000
          name: limit
          type: integer
      responses:
        "200":
          description: FixturesResponse
          schema:
            $ref: '#/definitions/FixturesResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get list of upcoming or live events with markets for a given Sport.
      tags:
        - API-Version-2.0
  /v2/odds/events/{id}:
    get:
      description: Shows all available main markets by default
      operationId: GetEvent
      parameters:
        - description: id of an event; e.g. 5837480
          format: uint64
          in: path
          name: id
          required: true
          type: integer
        - collectionFormat: multi
          description: |-
            If not empty, only display markets specified here. Note that all events in a given time-range will still be returned, even if the specified market is absent
            Must specify each market as a separate query param; e.g. ?markets=basketball.handicap&markets=basketball.moneyline
            Full list of markets: https://gist.github.com/kgravenreuth/6703e1e213aecac4d5728f2f699d34e7#file-markets-json
          in: query
          items:
            type: string
          name: markets
          type: array
      responses:
        "200":
          description: EventResponse
          schema:
            $ref: '#/definitions/EventResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get an event
      tags:
        - API-Version-2.0
  /v2/odds/fixtures:
    get:
      description: |-
        Shows live, upcoming and pre-trading fixtures of a given sport for a given date or time-range.
        Also note that a "day" counts as `00:00:00` UTC to `23:59:59` UTC on the requested date.
      operationId: GetFixtures
      parameters:
        - description: sport to query fixtures for, e.g. `tennis`
          in: query
          name: sport
          required: true
          type: string
        - description: |-
            date for which you want to query events in ISO 8601 (YYYY-MM-DD) format, e.g. 2021-05-27
            The timerange on the date for which events are returned is from 00:00:00 UTC to 23:59:59 UTC
            If `limit` is not sent as a separate query string, it is set to `10000` to get all events for a day
            Either `date` or `from` + `to` query params are REQUIRED in your request to specify a valid time-range.
            `date` can't be sent together with `from` or `to`
          in: query
          name: date
          type: string
        - description: |-
            time range for events, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1618997973
            Either `date` or `from` + `to` query params are REQUIRED in your request to specify a valid time-range.
            `date` can't be sent together with `from` or `to`
          format: int64
          in: query
          name: from
          type: integer
        - description: |-
            time range for events, Unix epoch time, i.e. seconds since January 1, 1970 midnight UTC; e.g. 1619042340
            Either `date` or `from` + `to` query params are REQUIRED in your request to specify a valid time-range.
            `date` can't be sent together with `from` or `to`
          format: int64
          in: query
          name: to
          type: integer
        - default: false
          description: if true, include players information
          in: query
          name: players
          type: boolean
        - default: 10000
          description: Limit the number of events
          format: int64
          in: query
          maximum: 10000
          name: limit
          type: integer
      responses:
        "200":
          description: FixturesResponse
          schema:
            $ref: '#/definitions/FixturesResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get fixtures (i.e. sporting events without markets or metadata) for a given sport on a given date
      tags:
        - API-Version-2.0
  /v2/odds/lines:
    post:
      operationId: PostLine
      parameters:
        - description: line fetch request JSON body
          in: body
          name: request
          required: true
          schema:
            $ref: '#/definitions/PostLine'
      responses:
        "200":
          description: LineResponse
          schema:
            $ref: '#/definitions/LineResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Obtain latest odds for a selection based on market key, outcome and params.
      tags:
        - API-Version-2.0
  /v2/odds/sports:
    get:
      description: Sports are ordered by alphabetical order.
      operationId: GetSports
      responses:
        "200":
          description: SportsResponse
          schema:
            $ref: '#/definitions/SportsResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get list of sports.
      tags:
        - API-Version-2.0
  /v2/odds/sports/{key}:
    get:
      description: Competitions are grouped by categories.
      operationId: GetSport
      parameters:
        - description: key of a sport; e.g. soccer
          in: path
          name: key
          required: true
          type: string
      responses:
        "200":
          description: SportWithCategoryResponse
          schema:
            $ref: '#/definitions/SportWithCategoryResponse'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "401":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      schemes:
        - https
      summary: Get competitions of a sport.
      tags:
        - API-Version-2.0
produces:
  - application/json
  - application/x-protobuf
responses:
  ErrResponse:
    description: ErrResponse error type presents response errors for all error status codes.
    headers:
      status:
        description: HTTP response status text
        type: string
      status_code:
        description: HTTP response status code
        format: int64
        type: integer
schemes:
  - https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: X-API-Key
    type: apiKey
swagger: "2.0"
security:
  - ApiKeyAuth: []