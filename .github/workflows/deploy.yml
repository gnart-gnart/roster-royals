name: Deploy to DigitalOcean Droplet

on:
  push:
    branches:
      - main # Or whichever branch triggers deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Set an overall timeout for the job
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master 
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Default SSH port
          script_stop: true # Stop script after first error
          command_timeout: 15m # Set command timeout to 15 minutes
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd /root/roster-royals
            echo "Pulling latest code from main branch..."
            git pull origin main
            echo "Stopping containers to allow volume removal..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down
            echo "Removing stale react_build volume..."
            docker volume rm roster-royals_react_build || true # Remove volume, continue if it doesn't exist
            
            # Speed up database startup by starting only the database first
            echo "Starting DB service for migrations..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d pgdb
            
            echo "Ensuring correct database ownership and permissions..."
            # Wait a brief moment for PostgreSQL to initialize fully
            sleep 10  # Increased wait time to ensure PostgreSQL is fully ready
            
            # Explicitly source the .env file to load DB credentials into the shell environment
            if [ -f .env ]; then
              echo "Sourcing .env file..."
              set -a # Automatically export all variables defined in .env
              source .env
              set +a # Stop automatically exporting
            else
              echo "Warning: .env file not found in $(pwd). Relying on existing environment variables."
            fi
            echo "Using POSTGRES_USER='${POSTGRES_USER:-'(unset)'}' POSTGRES_DB='${POSTGRES_DB:-'(unset)'}'"

            # Set a timeout for database operations
            timeout 60s bash -c '
              until docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T pgdb pg_isready; do
                echo "Waiting for PostgreSQL to be ready..."
                sleep 2
              done
            ' || echo "Database readiness check timed out, continuing anyway..."
            
            # First, connect as postgres superuser to ensure we have proper permissions for ownership changes
            echo "Setting up database permissions as postgres superuser..."
            timeout 30s docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T pgdb psql -U postgres -d postgres -c "
              DO \$\$
              BEGIN
                -- Create role if it doesn't exist
                IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '${POSTGRES_USER:-postgres}') THEN
                  CREATE ROLE \"${POSTGRES_USER:-postgres}\" WITH LOGIN SUPERUSER PASSWORD '${POSTGRES_PASSWORD:-postgres}';
                ELSE
                  ALTER ROLE \"${POSTGRES_USER:-postgres}\" WITH SUPERUSER;
                END IF;
                
                -- Grant ownership of the database
                ALTER DATABASE \"${POSTGRES_DB:-postgres}\" OWNER TO \"${POSTGRES_USER:-postgres}\";
              END
              \$\$;
            " || echo "Continuing after attempting to set up database permissions..."
            
            # Start django-web container for migrations
            echo "Starting django-web for migrations..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d django-web

            # Run migrations before rebuilding everything to save time
            echo "Running database migrationsâ€¦"
            timeout 60s docker compose -f docker-compose.yml -f docker-compose.prod.yml exec -T django-web \
              python manage.py migrate || echo "Migration timed out or failed, continuing anyway..."
            
            # Use parallel build to speed up the process
            echo "Rebuilding Docker images on the droplet with parallel builds..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache --parallel

            echo "Starting ALL Docker containers..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            
            # Clean up to save space
            echo "Cleaning up unused Docker resources..."
            docker image prune -f  # Remove unused images
            docker container prune -f  # Remove stopped containers
            
            echo "Deployment successful!" 