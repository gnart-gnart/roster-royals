name: Deploy to DigitalOcean Droplet

on:
  push:
    branches:
      - main # Or whichever branch triggers deployment

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Add step to free up disk space on the runner
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # Adjust these options if needed - removing common large items
          tool_cache: true
          android: true
          dotnet: true
          haskell: true
          large_packages: true
          swap: true

      - name: Deploy to Droplet
        uses: appleboy/ssh-action@master 
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22 # Default SSH port
          script: |
            set -e # Exit immediately if a command exits with a non-zero status.
            cd /root/roster-royals
            echo "Pulling latest code from main branch..."
            git pull origin main
            echo "Stopping containers to allow volume removal..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml down
            echo "Removing stale react_build volume..."
            docker volume rm roster-royals_react_build || true # Remove volume, continue if it doesn't exist
            echo "Starting DB and Web services for migrations..."
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d pgdb django-web # Start DB and Web
            echo "Running database migrations..."
            # Now the exec command should find the running django-web container
            docker compose -f docker-compose.yml -f docker-compose.prod.yml exec django-web python manage.py migrate
            echo "Cleaning up Docker build cache on runner..."
            docker builder prune -af || true # Prune build cache, continue even if it fails
            echo "Rebuilding Docker images without cache..."
            # Explicitly pass the API URL from GitHub secrets to the build command
            # Note: We set the REACT_APP_API_URL environment variable *for the build command itself*
            REACT_APP_API_URL="${{ secrets.REACT_APP_API_URL_SECRET }}" docker compose -f docker-compose.yml -f docker-compose.prod.yml build --no-cache
            echo "Starting ALL Docker containers..."
            # Use 'up -d' which will recreate the react_build volume automatically if missing
            docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d
            # Optional: Prune unused Docker images, containers, and volumes to save space
            # echo "Pruning Docker system..."
            # docker system prune -af
            echo "Deployment successful!" 