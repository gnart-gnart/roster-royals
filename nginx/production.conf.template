worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    gzip  on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Remove global CORS settings as they cause duplicate headers
    
    # Server block for HTTP (Port 80) - Redirects to HTTPS
    server {
        listen 80;
        # Replace SERVER_IP with the actual domain name
        server_name rosterroyals.com www.rosterroyals.com; # Add www if applicable

        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }

        # Optional: Handle Let's Encrypt ACME challenge (if using HTTP-01 challenge)
        location /.well-known/acme-challenge/ {
            root /var/www/certbot; # Or the path Certbot uses
        }
    }

    # Server block for HTTPS (Port 443)
    server {
        listen 443 ssl http2; # Enable SSL and HTTP/2
        server_name rosterroyals.com www.rosterroyals.com; # Add www if applicable

        # SSL Certificate paths (assuming standard Let's Encrypt paths)
        ssl_certificate /etc/letsencrypt/live/rosterroyals.com/fullchain.pem; # Use your actual domain
        ssl_certificate_key /etc/letsencrypt/live/rosterroyals.com/privkey.pem; # Use your actual domain

        # Improve SSL Security (Optional but recommended)
        include /etc/letsencrypt/options-ssl-nginx.conf; # Recommended by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # Recommended by Certbot

        # Add Strict Transport Security header (Optional but recommended)
        # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

        # Prevent clickjacking (Optional but recommended)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Root directory for static frontend files
        root /usr/share/nginx/html; # <-- Point to where react_build is mounted
        index index.html index.htm; # <-- Default file to serve

        # Frontend - Serve static files directly
        location / {
            # try_files looks for the file locally first, then falls back to index.html
            # This is standard for single-page applications (SPAs)
            try_files $uri $uri/ /index.html;
        }

        # Backend API (Keep as is)
        location /api/ {
            proxy_pass http://django-web:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme; # Important: Nginx sets this to 'https'

            # Handle preflight OPTIONS requests specially
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
                add_header 'Access-Control-Allow-Credentials' 'true';
                add_header 'Access-Control-Max-Age' '1728000';
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' '0';
                return 204;
            }
            # CORS headers for normal responses (Keep if backend doesn't handle CORS)
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        # Serve static files from Django collectstatic (Keep as is)
        location /static/ {
            alias /app/staticfiles/; # Check if this path is correct inside Nginx container
            expires 30d;
            add_header Cache-Control "public, no-transform";
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        # Serve media files (Keep as is)
        location /media/ {
             alias /app/media/; # Matches the volume mount in Nginx service
             expires 30d;
             add_header Cache-Control "public, no-transform";
             add_header 'Access-Control-Allow-Origin' '*' always;
        }
    }
} 