1. Database & Model Changes
 a. Rename Models and Fields
  • Rename the BettingGroup model to League. (This means renaming the model class and, if desired, the database table.)
  • Change all references to “group” (both in field names and related managers) within models to “league” (for example, BettingGroup.members → League.members).
  • In related models (like GroupEvent), rename the model to LeagueEvent and update the “event_key” field’s comment to reflect that it now stores an Odds API event ID.
  • Rename the “president” field in the league model to “captain”. All views and serializers that refer to the leader should now use “captain.”
 b. Create and run migrations to update the database with the new naming.
──────────────────────────────
2. New Odds API Client
 a. Create a new file (backend/groups/odds.py) that implements an OddsApiClient class. It should:
  • Read ODDS_API_KEY from the environment and use settings.ODDS_API_KEY and a corresponding ODDS_API_BASE_URL (e.g., "https://api.the-odds-api.com") from settings.
  • Provide methods similar to the old CloudbetClient but using the Odds API endpoints:
   – get_sports() – Call GET /v4/sports to retrieve a list of in-season sports.
   – get_sport_events(sport) – Call GET /v4/sports/{sport}/events to list active/upcoming events in that category.
   – get_event_odds(sport, event_id) – Call GET /v4/sports/{sport}/events/{event_id}/odds to fetch odds for a specific event.
  • Add any logging or error handling to mirror the current Cloudbet integration.
Settings & Environment Update
 a. Remove or deprecate CLOUDBET_API_KEY and CLOUDBET_API_BASE_URL from backend/roster_royals/settings.py.
 b. Ensure that ODDS_API_KEY (and set a new ODDS_API_BASE_URL if needed) are properly defined in settings and loaded from the .env file (as seen in .env).
──────────────────────────────
3. Backend View Updates
 a. In backend/groups/views.py and any other view modules:
  • Replace the import and instantiation of CloudbetClient with your new OddsApiClient from backend/groups/odds.py.
  • Update endpoints that previously fetched data from Cloudbet (e.g., get_available_bets and get_event_details) to use the Odds API endpoints.
  • Add a new endpoint (or update an existing one) for the “browse market” page. This endpoint should:
   – First call OddsApiClient.get_sports(), then group/sort the returned sports by their “group” attribute.
   – Allow a user to click a sports group to see all sports in that group.
   – Allow the user to click a particular sport to list its active/upcoming events by calling get_sport_events(sport).
 b. For adding an event to a league:
  • Create (or update) an endpoint which permits the league captain to select an event (from the Odds API results) and “add” it to the league.
  • When an event is added, save it as a LeagueEvent (formerly GroupEvent) with the event key and any related market data.
 c. Update any notifications or responses – for example, change the message texts from “group leader” or “president” to “captain” and “group” to “league.”
──────────────────────────────
4. Front End Updates
 a. Rename UI components & Labels
  • Change any UI text labels and route names that say “group” to “league” (e.g., “Your Groups” becomes “Your Leagues”).
  • Change “group leader” or “group president” references to “captain.”
 b. Market Page Creation (replacement for choosebetspage)
  • Build a new market page that:
   – Initially fetches sports via the new backend endpoint (using OddsApiClient.get_sports()) and groups them by their “group” attribute (for example, all sports under “Football”).
   – Allows the user to click on a sports group to then list all the sports in that group.
   – After clicking a specific sport, calls the backend endpoint for events – essentially wrapping a call to GET /v4/sports/{sport}/events.
   – Displays the event list (active/upcoming) with key details (teams, start times, etc.).
  • Once an event is selected, if the user is a league captain, provide an “Add Event” option to add that event to the league.
  • For events that have been added to the league, update the league page to show odds (by making a separate call to /v4/sports/{sport}/events/{eventId}/odds) as well as UI actions for betting (selecting a line, wagering an amount).
 
 c. Event Resolution UI
  • Create UI components such that, once an event is over, the league page updates to show the outcome.
  • Allow members to click on a completed event to “claim their reward” and view details on winnings, potentially calling a new backend endpoint that calculates and returns the results.
 d. Update front-end services (API calls) to use the new endpoints, and adjust any state management to reflect the changes in data structure from Odds API.
──────────────────────────────
5. Cleanup
 a. Remove the old Cloudbet integration (the file backend/groups/cloudbet.py and any leftover references to “cloudbet”).
 b. Search through the codebase and update all occurrences of “group” as needed to “league” (and “president” to “captain”) in both variable names, API responses, and UI text.
 c. Update documentation and READMEs for your coworkers to reflect these changes.


The resulting UI flow should work like this:
- creating and joining groups and adding friends needs no change, except that we should change all mentions of group to "league" in both the database and front end. Once on the group page, the league captain (change all mentions of
group leader or group president in the code to captain) may "browse market."

The market page will be a replacement for the choosebetspage with similar functionality:
- First it will display all groups of sports, such as "Football," etc. Use the /v4/sports endpoint to retrieve this information and sort all the sports returned by their group attribute. Are you able to see the documentation for this endpoint in the API-Documentation folder?

- The user can click on a sports group to see all the sports inside that group and may click on one to see all the active and upcoming events in that category. Use the /v4/sports/{sport}/events endpoint. Do you need documentaiton for this endpoint?

- The group leader can then add an event to his group. Once added, events will appear on the group page with odds from the /v4/sports/{sport}/events/{eventId}/odds endpoint. Lmk if u need docs. Group members may click on these events and choose their line and how much they will bet on it.

- Once the event is over, the group page will be updated to indicate such and members can click the event to claim their reward and view the results and how much money each member won.